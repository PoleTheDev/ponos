type ExchangeType = 'direct' | 'fanout' | 'topic';

declare class RabbitMQConnection {
  on(event: string, handler: Function): void;
  close(): Promise<void>;
  createChannel(): RabbitMQChannel;
  createConfirmChannel(): RabbitMQConfirmChannel;
}

declare class RabbitMQChannel {
  ack(message: Object): void;
  assertExchange(exchange: string, type: string, opts: ?Object): Promise<void>;
  assertQueue(queue: string, opts: ?Object): Promise<QueueObject>;
  bindQueue(queue: string, exchange: string, routingKey: string): Promise<void>;
  cancel(consumerTag: string): Promise<void>;
  consume(queue: string, handler: Function): void;
  on(event: string, handler: Function): void;
  prefetch(count: Number, global?: Boolean): Promise<void>;
  publish(exchange: string, routingKey: string, content: Buffer): Promise<void>;
  sendToQueue(queue: string, content: Buffer): Promise<void>;
}

declare class RabbitMQConfirmChannel extends RabbitMQChannel {
  waitForConfirms(): Promise<void>;
}

type QueueObject = {
  queue: string
}

declare class RabbitMQ {
  static connect(url: string, opts: ?Object): RabbitMQConnection;
}

declare module 'amqplib' {
  declare var exports: typeof RabbitMQ;
}

type SubscribeObject = {
  exchange: string,
  exchangeOptions?: Object,
  handler: Function,
  queueOptions?: Object,
  routingKey?: string,
  type: ExchangeType
}

type RabbitMQOptions = {
  queueOptions?: Object,
  exchangeOptions?: Object
}
